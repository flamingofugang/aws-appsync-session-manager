---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS AppSync Session Manager

Parameters:
  APIName:
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    Default: SessionManager
    Description: Name of your AppSync API
    MinLength: 3
    MaxLength: 20
    Type: String

  ProjectName:
    Type: String
    Default: aws-appsync-session-manager

Resources:
  ### AppSync ###
  SessionManagerApi:
    Type: AWS::AppSync::GraphQLApi
    Description: Session Manager GraphQL API
    DependsOn: SessionManagerUserPool
    Properties:
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      Name: !Sub ${APIName}
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
        FieldLogLevel: "ERROR"
      UserPoolConfig:
        UserPoolId: !Ref SessionManagerUserPool
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: "ALLOW"

  SessionManagerSchema:
    Type: AWS::AppSync::GraphQLSchema
    DependsOn: SessionManagerApi
    Description: Session Manager GraphQL schema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      DefinitionS3Location: s3://INSERT_LOCATION/schema.graphql

  UserScheduleQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Query
      FieldName: userSchedule
      DataSourceName: !GetAtt UserScheduleTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query":  {
            "expression": "UserId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # TODO: is a PHONY session id a reasonable approach to avoid an error?
  UserScheduleTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: UserSchedule
      FieldName: Sessions
      DataSourceName: !GetAtt SessionsTableDataSource.Name
      RequestMappingTemplate: !Sub |
        #set($ids = [])
        #foreach($item in ${!ctx.source.items})
          #set($map = {})
          $util.qr($map.put("SessionId", $util.dynamodb.toString($item.SessionId)))
          $util.qr($ids.add($map))
        #end

        #if($ids.isEmpty())
          #set($map = {})
          $util.qr($map.put("SessionId", $util.dynamodb.toString("PHONY")))
          $util.qr($ids.add($map))
        #end

        {
          "version" : "2018-05-29",
          "operation" : "BatchGetItem",
          "tables" : {
            "${DDBSessionsTable}": {
              "keys": $util.toJson($ids),
              "consistentRead": true
            }
          }
        }
      ResponseMappingTemplate: !Sub |
        #if($ctx.source.items.isEmpty())
          $util.toJson([])
        #else
          $util.toJson($ctx.result.data.${DDBSessionsTable})
        #end

  UserScheduleUserTypeResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: UserSchedule
      FieldName: User
      DataSourceName: !GetAtt LocalDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "payload": {
                "Username": "${ctx.identity.username}",
                "Email": "${ctx.identity.claims.email}"
            }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AllSessionsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Query
      FieldName: allSessions
      DataSourceName: !GetAtt SessionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull(${ctx.args.limit}, 20),
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))
        }
      ResponseMappingTemplate: |
        {
          "sessions": $util.toJson($ctx.result.items),
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.result.nextToken, null))
        }

  GetSessionQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Query
      FieldName: getSession
      DataSourceName: !GetAtt SessionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "SessionId": $util.dynamodb.toDynamoDBJson($ctx.args.SessionId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  SearchQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Query
      FieldName: search
      DataSourceName: !GetAtt SessionsElasticsearchDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GET",
          "path": "/id/sessions/_search",
          "params": {
            "headers": {},
            "queryString": {},
            "body": {
              "from": 0,
              "size": 10,
              "query": {
                "multi_match": {
                  "query": "${ctx.args.text}",
                  "fields": [ "Title", "Description" ]
                }
              }
            }
          }
        }
      ResponseMappingTemplate: |
        {
          "sessions": [
                        #foreach($entry in $context.result.hits.hits)
                        #if( $velocityCount > 1 ) , #end
                        $utils.toJson($entry.get("_source"))
                        #end
                      ],
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.result.nextToken, null))
        }


  CreateSessionMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Mutation
      FieldName: createSession
      DataSourceName: !GetAtt SessionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "SessionId": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": {
            "CreatedBy": $util.dynamodb.toDynamoDBJson($ctx.identity.username),
            "Description": $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.Session.Description, "")),
            "EndTime": $util.dynamodb.toDynamoDBJson($ctx.args.Session.EndTime),
            "SessionType": $util.dynamodb.toDynamoDBJson($ctx.args.Session.SessionType),
            "StartTime": $util.dynamodb.toDynamoDBJson($ctx.args.Session.StartTime),
            "Title": $util.dynamodb.toDynamoDBJson($ctx.args.Session.Title)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  DeleteSessionMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Mutation
      FieldName: deleteSession
      DataSourceName: !GetAtt SessionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "SessionId": $util.dynamodb.toDynamoDBJson($ctx.args.SessionId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ScheduleSessionMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Mutation
      FieldName: scheduleSession
      DataSourceName: !GetAtt UserScheduleTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub),
            "SessionId": $util.dynamodb.toDynamoDBJson($ctx.args.SessionId)
          },
          "attributeValues": {
            "ScheduledAt": $util.dynamodb.toDynamoDBJson($util.time.nowFormatted("yyyy-MM-dd HH:mm:ssZ"))
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  RemoveSessionMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: SessionManagerSchema
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      TypeName: Mutation
      FieldName: removeSession
      DataSourceName: !GetAtt UserScheduleTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub),
            "SessionId": $util.dynamodb.toDynamoDBJson($ctx.args.SessionId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ### AppSync Data Sources ###
  SessionsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      Name: !Sub ${APIName}_sessions_table
      Description: AppSync data source sessions table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DDBSessionsTable
        AwsRegion: !Sub ${AWS::Region}
  
  UserScheduleTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      Name: !Sub ${APIName}_user_schedule_table
      Description: AppSync data source user schedule table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DDBUserScheduleTable
        AwsRegion: !Sub ${AWS::Region}
  
  SessionsElasticsearchDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      Name: !Sub ${APIName}_sessions_es
      Description: AppSync data source for Elasticsearch
      Type: AMAZON_ELASTICSEARCH
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      ElasticsearchConfig:
        Endpoint: !Sub https://${ESSessionsDomain.DomainEndpoint}
        AwsRegion: !Sub ${AWS::Region}

  LocalDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt SessionManagerApi.ApiId
      Name: !Sub ${APIName}_local
      Description: Local data source
      Type: NONE

  ### Lambda ###
  StreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stream/
      Handler: index.handler
      Runtime: nodejs8.10
      Description: Processes DynamoDB stream, writing to Elasticsearch
      Role: !GetAtt StreamFunctionServiceRole.Arn
      Timeout: 10
      Environment:
        Variables:
          ELASTICSEARCH_DOMAIN: !GetAtt ESSessionsDomain.DomainEndpoint
          ELASTICSEARCH_INDEX: sessions
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DDBSessionsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10

  ### Cognito ###
  SessionManagerUserPool:
    Type: AWS::Cognito::UserPool
    Description: Cognito User Pool to be used for Session Manager demo
    Properties:
      UserPoolName: !Sub ${APIName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true

  SessionManagerEditorGroup:
    Type: AWS::Cognito::UserPoolGroup
    Description: Cognito User Pool Group of Editors for Session Manager
    Properties:
      Description: Session Manager editors
      GroupName: Editors
      UserPoolId: !Ref SessionManagerUserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Description: App client for the Cognito User Pool, used by AppSync
    Properties:
      ClientName: !Sub ${APIName}-appsync-client
      GenerateSecret: false
      UserPoolId: !Ref SessionManagerUserPool

  ### DynamoDB ###
  DDBSessionsTable:
    Type: AWS::DynamoDB::Table
    Description: Session Manager sessions table
    Properties:
      TableName: !Sub ${APIName}-sessions-table
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  DDBUserScheduleTable:
    Type: AWS::DynamoDB::Table
    Description: Session Manager schedule table
    Properties:
      TableName: !Sub ${APIName}-user-schedule-table
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: SessionId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ### Elasticsearch ###
  ESSessionsDomain:
    Type: AWS::Elasticsearch::Domain
    Description: Elasticsearch domain to enable searching of sessions
    Properties:
      DomainName: session-manager
      ElasticsearchVersion: 5.5
      ElasticsearchClusterConfig:
        InstanceCount: 2
        ZoneAwarenessEnabled: false
        InstanceType: t2.small.elasticsearch
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      AccessPolicies: 
        Version: 2012-10-17
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS:
                - !GetAtt AppSyncServiceRole.Arn
                - !GetAtt StreamFunctionServiceRole.Arn
            Action:
              - es:ESHttpDelete
              - es:ESHttpHead
              - es:ESHttpGet
              - es:ESHttpPost
              - es:ESHttpPut
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain:session-manager/*

  ### IAM ###
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /session-manager/
      RoleName: !Sub ${APIName}-appsync-service-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
  
  AppSyncDDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: appsync-session-manager-ddb-policy
      Roles:
        - !Ref AppSyncServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !Join [ "", [ !GetAtt DDBSessionsTable.Arn, "*" ] ]
              - !Join [ "", [ !GetAtt DDBUserScheduleTable.Arn, "*" ] ]

  AppSyncDDBBatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: appsync-session-manager-ddb-batch-policy
      Roles:
        - !Ref AppSyncServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !GetAtt DDBSessionsTable.Arn

  ESAccessPolicy:
    Type: AWS::IAM::Policy
    DependsOn: ESSessionsDomain
    Properties:
      PolicyName: appsync-session-manager-es-policy
      Roles:
        - !Ref AppSyncServiceRole
        - !Ref StreamFunctionServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - es:ESHttpDelete
              - es:ESHttpHead
              - es:ESHttpGet
              - es:ESHttpPost
              - es:ESHttpPut
            Resource:
              - !Sub ${ESSessionsDomain.DomainArn}/*
              # - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/session-manager

  StreamFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /session-manager/
      RoleName: !Sub ${APIName}-lambda--service-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  StreamFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: appsync-session-manager-stream-function-policy
      Roles:
        - !Ref StreamFunctionServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:DescribeStream
              - dynamodb:ListStreams
            Resource: !GetAtt DDBSessionsTable.StreamArn

Outputs:
  ApiEndpoint:
    Description: GraphQL Endpoint
    Value: !GetAtt SessionManagerApi.GraphQLUrl
  ApiId:
    Description: GraphQL API ID
    Value: !GetAtt SessionManagerApi.ApiId
    Export:
      Name: !Sub "${ProjectName}-sessions-manager-api"
  CognitoClientId:
    Description: Cognito App Client ID
    Value: !Ref UserPoolClient
  ElasticsearchDomain:
    Description: Elasticsearch Domain
    Value: !Sub https://${ESSessionsDomain.DomainEndpoint}
  SessionsTableStream:
    Description: ARN for SessionsTable Stream
    Value: !GetAtt DDBSessionsTable.StreamArn
    Export:
      Name: !Sub "${ProjectName}-sessions-stream"
  UserScheduleTableStream:
    Description: ARN for UserScheduleTable Stream
    Value: !GetAtt DDBUserScheduleTable.StreamArn
    Export:
      Name: !Sub "${ProjectName}-user-schedule-stream"    
  AppSyncServiceRoleArn:
    Description: ARN for AppSync Service Role
    Value: !GetAtt AppSyncServiceRole.Arn
    Export:
      Name: !Sub "${ProjectName}-appsync-service-role-arn"
  AppSyncServiceRoleName:
    Description: ARN for AppSync Service Role
    Value: !Ref AppSyncServiceRole
    Export:
      Name: !Sub "${ProjectName}-appsync-service-role"